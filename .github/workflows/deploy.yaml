name: Deploy PR for Validation

on:
  # pull_request:
  #   types: [labeled]
  workflow_dispatch:
    inputs:
      pr_number:
        description: PR number for testing
        required: true
        type: number
      # env_to_use:
      #   description: Environment
      #   required: true
      #   type: choice
      #   options:
      #     - dev1
      #     - dev2
      # jira_ticket:
      #   description: JIRA Ticket ID
      #   required: true
      #   type: string
env:
  ARTIFACT_NAME: app-${{ inputs.pr_number }}
  PROJECT_ID: github-actions-demo-399800
  GAR_LOCATION: us-east5
  REPOSITORY: github-actions-demo
  # SERVICE: YOUR_SERVICE_NAME # TODO: update Cloud Run service name
  # REGION: YOUR_SERVICE_REGION # TODO: update Cloud Run service region

jobs:
  Deployment:
    # Only allow this workflow to run from the main branch
    # It can can deploy other branches, but the main branch
    # should be the source of code for this workflow
    if: github.ref_name == github.event.repository.default_branch
    permissions:
      contents: 'read'
      id-token: 'write'
    runs-on: ubuntu-latest
    steps:
      - name: Google Auth
        id: auth
        uses: 'google-github-actions/auth@v0'
        with:
          token_format: 'access_token'
          workload_identity_provider: '${{ secrets.WIF_PROVIDER }}' # e.g. - projects/123456789/locations/global/workloadIdentityPools/my-pool/providers/my-provider
          service_account: '${{ secrets.WIF_SERVICE_ACCOUNT }}' # e.g. - my-service-account@my-project.iam.gserviceaccount.com

      # NOTE: Alternative option - authentication via credentials json
      # - name: Google Auth
      #   id: auth
      #   uses: 'google-github-actions/auth@v0'
      #   with:
      #     credentials_json: '${{ secrets.GCP_CREDENTIALS }}'
      #     token_format: 'access_token'
      - name: Deploy to Cloud Run
        id: deploy
        uses: google-github-actions/deploy-cloudrun@v0
        with:
          service: ${{ env.ARTIFACT_NAME }}
          region: ${{ env.GAR_LOCATION }}
          # NOTE: If using a pre-built image, update the image name here
          # us-east5-docker.pkg.dev/github-actions-demo-399800/github-actions-demo
          image: ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.ARTIFACT_NAME }}:latest
          # NOTE: You can also set env variables here:
          #  env_vars: |
          #  NODE_ENV=production
          #  TOKEN_EXPIRE=6400

      # If required, use the Cloud Run url output in later steps
      - name: Show Output
        run: echo ${{ steps.deploy.outputs.url }}



    # - name: 'Download artifact'
    #   uses: actions/github-script@v6
    #   with:
    #     script: |
    #       let allArtifacts = await github.rest.actions.listArtifactsForRepo({
    #           owner: context.repo.owner,
    #           repo: context.repo.repo,
    #           name: "${{ env.SERVER_ARTIFACT_NAME }}",
    #       });
    #       let matchArtifact = allArtifacts.data.artifacts[0];
    #       let download = await github.rest.actions.downloadArtifact({
    #           owner: context.repo.owner,
    #           repo: context.repo.repo,
    #           artifact_id: matchArtifact.id,
    #           archive_format: 'zip',
    #       });
    #       let fs = require('fs');
    #       fs.writeFileSync(`${process.env.GITHUB_WORKSPACE}/${{ env.SERVER_ARTIFACT_NAME }}.zip`, Buffer.from(download.data));
    # - name: Save App Client Artifact
    #   uses: actions/upload-artifact@v3
    #   with:
    #     name: ${{ env.SERVER_ARTIFACT_NAME }}.zip
    #     path: ${{ env.SERVER_ARTIFACT_NAME }}.zip
    #     if-no-files-found: error
    # - name: 'Unzip artifact'
    #   run: unzip app-server.zip

      # - name: 'Comment on PR'
      #   uses: actions/github-script@v6
      #   with:
      #     github-token: ${{ secrets.GITHUB_TOKEN }}
      #     script: |
      #       let fs = require('fs');
      #       let issue_number = ${{ inputs.pr_number }};
      #       await github.rest.issues.createComment({
      #         owner: context.repo.owner,
      #         repo: context.repo.repo,
      #         issue_number: issue_number,
      #         body: 'App has been deployed to ${{ inputs.env_to_use }} for testing ${{ inputs.jira_ticket }}'
      #       });
      #       await github.rest.issues.addLabels({
      #         owner: context.repo.owner,
      #         repo: context.repo.repo,
      #         issue_number: issue_number,
      #         labels: ['Deployed']
      #       });
